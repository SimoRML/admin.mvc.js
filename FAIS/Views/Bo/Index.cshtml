@model FAIS.Models.META_BO

@if (Model.STATUS == "PENDING")
{
    <div class="col-md-12" id="my-vue-app">
        <div class="alert alert-warning">
            <span>
                <b> Warning - </b>
                THE BUSINESS OBJECT IS PENDING SETUP !
                <br />
                YOU MUST COMMIT A VERSION TO START PRODUCTION.
            </span>
        </div>
    </div>
}
else
{

    <div class="col-md-12" id="my-vue-app">

        <div class="nav-left">
            <ul class="nav nav-pills nav-pills-icons nav-pills-icons" role="tablist">
                <!--
                    color-classes: "nav-pills-primary", "nav-pills-info", "nav-pills-success", "nav-pills-warning","nav-pills-danger"
                -->
                <li class="active">
                    <a id="tab-list" href="#description-1" role="tab" data-toggle="tab">
                        <i class="material-icons">list</i> List
                    </a>
                </li>
                <li>
                    <a id="tab-form" href="#schedule-1" role="tab" data-toggle="tab">
                        <i class="material-icons">add</i> Ajouter
                    </a>
                </li>

            </ul>
        </div>
        <div class="tab-content">
            <div class="tab-pane active" id="description-1">
                <div v-show="filterExists" class="card">
                    <div class="card-header">
                        Filter
                    </div>
                    <div class="card-content">

                        <form onsubmit="return false;">
                            @*THE COMPONENET*@
                            <div class="row">
                                <template v-for="field in getFiltre">
                                    <component :name="field.FORM_TYPE"
                                               :is="field.FORM_TYPE"
                                               v-model="filterBody[field.DB_NAME].value"
                                               v-bind="{label:field.FORM_NAME,optional:1,datasource:field.FORM_SOURCE,fieldName:field.DB_NAME,cssClass:'col-md-3'}"></component>
                                </template>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <button type="submit" class="btn btn-fill btn-primary pull-right" v-on:click="filtrer">Filtrer<div class="ripple-container"></div></button>
                                </div>
                            </div>

                        </form>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">Description about product</h4>

                    </div>
                    <div class="card-content">

                        <v-table ref="theTable"
                                 meta-name="@Model.BO_DB_NAME"
                                 datasource="metabo/select/@Model.BO_DB_NAME"
                                 action-component="fields-action"></v-table>

                    </div>
                </div>
            </div>
            <div class="tab-pane " id="schedule-1">
                <div class="card">
                    <div class="card-header">

                    </div>
                    <div class="card-content">
                        <v-form ref="theForm"
                                meta-datasource="metabo/GetDefinition/@Model.BO_DB_NAME"
                                api="metabo/Crud/@Model.META_BO_ID"
                                v-on:submit-success="success"
                                v-on:submit-fail="error"></v-form>
                    </div>
                </div>
            </div>

        </div>

    </div>
    <script id="fields-action-template" type="vue/template">
        <div class="pull-right">
            <button class="btn btn-primary btn-round btn-fab btn-fab-mini btn-fab-x-mini"
                    v-on:click="edit(row.BO_ID)">
                <i class="material-icons">create</i>
            </button>
        </div>
    </script>

    <script type="text/javascript">
        bus.setMeta("@Model.BO_DB_NAME", @Html.Raw(Json.Encode(Model)));
        var vapp = new Vue(
            {
                el: '#my-vue-app',
                methods: {
                    success: function (response) {
                        NOTIF.success('Objet enregistré avec succès.');
                        $("#tab-list").trigger("click");
                        this.$refs.theTable.load();
                    },
                    error: function (Response) {
                        NOTIF.error('Impossible d\'enregistré l\'objet !<br>' + Response.responseJSON.ExceptionMessage);
                    },
                    filtrer: function () {
                        var me = this;
                        var filterModel = {
                            MetaBoID: @Model.META_BO_ID,
                            Items: []

                        };
                        for (var key in this.filterBody) {
                            var e = this.filterBody[key];
                            if (e.value === null || e.value.trim()=='') continue;
                            filterModel.Items.push(
                                {
                                    "Logic": " and ",
                                    "Field": key,
                                    "Condition": e.type === "v-text" ? " like " : " = ",
                                    "Value": e.type === "v-text" ? "%"+e.value+"%" : e.value
                                }
                            );
                        }

                        var data = EV.getComponent("data");
                        data.ExecuteSource({
                            url: "metabo/filter",
                            data: JSON.stringify(filterModel),
                            method: "POST",
                            loadComplete: function (obj, response) {
                                me.$refs.theTable.loadObject(response);
                            },
                            fail: function (response) {
                                console.log("fail : ",response);
                            }
                        });
                    }
                },
                data: {
                    filterExists: false,
                    filterBody: {}
                },
                computed: {
                    getFiltre: function () {
                        var arrFields = [];
                        var META_FIELDS = bus.$data.@Model.BO_DB_NAME;

                        META_FIELDS.META_FIELD.forEach((e) => {
                            if (e.IS_FILTER === 1) {
                                arrFields.push(e);
                                this.filterBody[e.DB_NAME] = {type : e.FORM_TYPE,value : null};
                                this.filterExists = true;
                            }
                        });

                        return arrFields;
                    }
                }
            });


        Vue.component('fields-action', {
            template: $("#fields-action-template").html(),
            props: {
                row: Object
            },
            methods: {
                edit: (id) => {
                    vapp.$refs.theForm.Get(id);
                    $("#tab-form").trigger("click");
                }
            }
        });


    </script>
}
