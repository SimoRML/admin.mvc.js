<script id="TableComponentTemplate" type="text/template">
    <table class="table table-striped table-no-bordered table-hover" cellspacing="0" width="100%" style="width:100%">
        <thead>
            <tr>
                <th v-if="detailRowDefined"></th>
                <template v-for="h in getHeaders">
                    <th v-if="show(h)">
                        {{ getLabel(h) }}
                    </th>
                </template>
                <th v-if="actionComponentDefined"></th>
            </tr>
        </thead>
        <tbody>
            <template v-for="(item, index) in list">
                <tr>
                    <td v-if="detailRowDefined"
                        v-on:click="toggleDetailRow(index)">
                        <i class="material-icons i-btn-round" v-show="showDetailRow[index] != null && showDetailRow[index]">expand_less</i>
                        <i class="material-icons i-btn-round" v-show="showDetailRow[index] == null || !showDetailRow[index]">expand_more</i>
                    </td>
                    <template v-for="h in getHeaders">
                        <td v-if="show(h)">
                            {{ item[h] }} 
                        </td>
                    </template>
                    <td v-if="actionComponentDefined">
                        <component v-bind:is="actionComponent" v-bind="{row:item}"></component>
                    </td>
                </tr>
                <tr  class="detailRow" v-if="detailRowDefined" v-show="showDetailRow[index] != null && showDetailRow[index]">
                    <td v-bind:colspan="columnCount">
                        <component v-bind:is="detailRow" v-bind="{row:item, columnLabels: columnLabels}"></component>
                    </td>
                </tr>
            </template>
        </tbody>
    </table>
</script>
<script type="text/javascript">
    Vue.component('v-table', {
        template: $("#TableComponentTemplate").html(),
        props: {
            datasource: String,
            columnIgnore: Array,
            columnShow: Array,
            columnLabels: Object,
            detailRow: String,
            actionComponent: String,
        },
        data: function () {
            return {
                list: [],
                showDetailRow: [],
            }
        },
        computed: {
            getHeaders: function () {
                if (this.list.length > 0) {
                    var headers = [];
                    for (var h in this.list[0]) {
                        headers.push(h);
                    }
                    return headers;
                }
                else
                    return [];
            },
            columnCount: function () {
                return this.getHeaders.length;
            },
            detailRowDefined: function() {
                return this.detailRow != null;
            },
            actionComponentDefined: function () {
                return this.actionComponent != null;
            }
        },
        methods: {
            load: function (url) {
                var me = this;
                if (typeof me.datasource === "undefined" && typeof url === "undefined") return;
                if (typeof url === "undefined") url = me.datasource;

                var data = EV.getComponent("data");
                data.ExecuteSource({
                    url: url,
                    loadComplete: function (obj, response) {
                        me.list = response;
                    }
                });
            },
            show: function (colName) {
                if (typeof this.columnShow !== "undefined") {
                    return this.columnShow.includes(colName);
                } else {
                    if (typeof this.columnIgnore === "undefined")
                        return true;
                    else
                        return !this.columnIgnore.includes(colName);
                }
            },
            getLabel: function (colName) {
                if (typeof this.columnLabels === "undefined" || typeof this.columnLabels[colName] === "undefined")
                    return colName;
                else
                    return this.columnLabels[colName];
            },
            toggleDetailRow: function (index) {
                this.$set(this.showDetailRow, index, this.showDetailRow[index] == null ? true : !this.showDetailRow[index]);
            }
        },
        created: function () {
            this.load();
        }
    });
</script>