@model FAIS.Models.META_BO
@{
    string boName()
    {
        return Model.BO_NAME;
    }
    string boDbName(string txt)
    {
        return Model.BO_DB_NAME + txt;
    }
    bool isSubForm = ViewBag.isSubForm != null;
}
@helper renderTable(bool includeDatasource)
{
    <template v-if="canRead()">
        <v-table ref="theTable"
                 meta-name="@Model.BO_DB_NAME"
                 :column-show="columnShow"
                 :column-labels="columnLabels"
                 @if (includeDatasource) { @: datasource="metabo/select/@Model.BO_DB_NAME"
                 }
                 :action-component="canWrite() ? '@Model.BO_DB_NAME-action' : ''"
                 detail-row="default"
                 :prevent-first-load="filterExists">


            <div slot="action" slot-scope="slotProps" v-if="props != null && props.actionHref != null">
                <a :href="'#' + formatActionHref(slotProps, props.actionHref)" :class="'btn btn-round btn-fab btn-fab-mini btn-fab-x-mini ' + props.actionColor">
                    <i class="material-icons">{{ props.actionIcone }}</i>
                </a>
            </div>

        </v-table>
    </template>
    <template v-else>
        <div class="alert alert-danger alert-with-icon" data-notify="container">
            <i class="material-icons" data-notify="icon">error</i>
            <button type="button" aria-hidden="true" class="close">
                <i class="material-icons">close</i>
            </button>
            <span data-notify="message">Unauthorized Read Access On @Model.BO_NAME</span>
        </div>
    </template>
}
@helper renderForm()
{
    <template v-if="canWrite()">
        <v-form ref="theForm"
                meta-datasource="metabo/GetDefinition/@Model.BO_DB_NAME"
                api="metabo/Crud/@Model.META_BO_ID"
                bo-name="@Model.BO_DB_NAME"
                v-on:submit-success="success"
                v-on:submit-fail="error"
                v-on:get-definition-done="getDefinitionDone"
                v-on:update-mode="updateMode"
                v-on:insert-mode="insertMode"
                v-on:remove-success="removeSuccess"></v-form>
    </template>
    <template v-else>
        <div class="alert alert-danger alert-with-icon" data-notify="container">
            <i class="material-icons" data-notify="icon">error</i>
            <button type="button" aria-hidden="true" class="close">
                <i class="material-icons">close</i>
            </button>
            <span data-notify="message">Unauthorized Write Access On @Model.BO_NAME</span>
        </div>
    </template>
}

@if (Model.STATUS == "PENDING")
{
    <div class="col-md-12" id="@boDbName("-vue-app")">
        <div class="alert alert-warning">
            <span>
                <b> Warning - </b>
                THE BUSINESS OBJECT IS PENDING SETUP !
                <br />
                YOU MUST COMMIT A VERSION TO START PRODUCTION.
            </span>
        </div>
    </div>
}
else
{
    <div class="col-md-12" id="@boDbName("-vue-app")">
        @if (isSubForm)
        {
            <ul class="nav nav-pills nav-pills-info">
                <li class="active">
                    <a id="@boDbName("tab-list")" href="#@boDbName("_table")" data-toggle="tab">Liste</a>
                </li>
                <li>
                    <a id="@boDbName("tab-form")" href="#@boDbName("_form")" data-toggle="tab" v-show="CurrentMode.mode === 'update'">Modifier</a>
                </li>
                <li>
                    <a id="@boDbName("tab-form-add")" href="#@boDbName("_form")" data-toggle="tab" v-on:click="$refs.theForm.reset()">Ajouter</a>
                </li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane active scroll-x" id="@boDbName("_table")">
                    @renderTable(false)
                </div>
                <div class="tab-pane" id="@boDbName("_form")">
                    @renderForm()

                    <div :class="'col-md-12 ' + CurrentMode.subFormMode" v-if="hasSubForm" v-for="subform in subForms">
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title">{{ subform.FORM_NAME }}</h4>
                            </div>
                            <div class="card-content">
                                <div v-include="{url:subform.url}"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br />
        }
        else
        {

            <div class="nav-left">
                <ul class="nav nav-pills nav-pills-icons" role="tablist">
                    <!--
                        color-classes: "nav-pills-primary", "nav-pills-info", "nav-pills-success", "nav-pills-warning","nav-pills-danger"
                    -->
                    <li class="active">
                        <a id="@boDbName("tab-list")" href="#@boDbName("list")" role="tab" data-toggle="tab">
                            @if (!isSubForm)
                            {
                                <i class="material-icons">list</i>
                            }
                            Liste
                        </a>

                    </li>
                    <li>
                        <a id="@boDbName("tab-form")" href="#@boDbName("form")" role="tab" data-toggle="tab" v-show="CurrentMode.mode === 'update'">
                            @if (!isSubForm)
                            {
                                <i class="material-icons">create</i>
                            }
                            Modifier
                        </a>
                    </li>
                    <li v-if="canWrite()">
                        <a id="@boDbName("tab-form-add")" href="#@boDbName("form")" role="tab" data-toggle="tab" v-on:click="$refs.theForm.reset()">
                            @if (!isSubForm)
                            {
                                <i class="material-icons">note_add</i>
                            }
                            Ajouter
                        </a>
                    </li>
                </ul>
            </div>
            <div class="tab-content">
                <div class="tab-pane active" id="@boDbName("list")">
                    <div v-show="filterExists" class="card" v-if="canRead()">
                        <div class="card-header">
                            Filtre
                        </div>
                        <div class="card-content">

                            <form onsubmit="return false;">
                                @*THE COMPONENET*@
                                <div class="row">
                                    <template v-for="field in getFiltre">
                                        <component :name="field.FORM_TYPE"
                                                   :is="field.FORM_TYPE"
                                                   v-model="filterBody[field.DB_NAME].value"
                                                   v-bind="{id:field.DB_NAME+'_filter',label:field.FORM_NAME,optional:1,datasource:field.FORM_SOURCE,fieldName:field.DB_NAME,cssClass:'col-md-3'}"></component>
                                    </template>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <button id="@boDbName("btnFilter")" type="submit" class="btn btn-fill btn-primary pull-right" v-on:click="filtrer">Filtrer<div class="ripple-container"></div></button>
                                    </div>
                                </div>

                            </form>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-content scroll-x">
                            @renderTable(true)
                        </div>
                    </div>
                </div>
                <div class="tab-pane " id="@boDbName("form")">
                    <div :class="{'col-md-12':hasSubForm}">
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title">{{ CurrentMode.title }}</h4>
                                <p class="category">
                                    {{ CurrentMode.subtitle }}
                                </p>
                            </div>
                            <div class="card-content">
                                @renderForm()
                            </div>
                        </div>
                    </div>
                    <div :class="'col-md-12 ' + CurrentMode.subFormMode" v-if="hasSubForm" v-for="subform in subForms">
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title subFormTitle">{{ subform.FORM_NAME }}</h4>
                            </div>
                            <div class="card-content">
                                <div v-include="{url:subform.url}"></div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        }

    </div>


    <script id="@boDbName("-action-template")" type="vue/template">
        <div class="pull-right">
            <v-workflow-v :boid="row.BO_ID" :index="index" vapp="@boDbName("vapp")"></v-workflow-v>

            <button class="btn btn-primary btn-round btn-fab btn-fab-mini btn-fab-x-mini"
                    v-on:click="edit(row.BO_ID)">
                <i class="material-icons">create</i>
            </button>

            <button class="btn btn-danger btn-round btn-fab btn-fab-mini btn-fab-x-mini"
                    v-on:click="remove(row.BO_ID, index)">
                <i class="material-icons">delete</i>
            </button>
        </div>
    </script>
    <script type="text/javascript">
        var @boDbName("META_BO") = @Html.Raw(Json.Encode(Model));

        // parse json data
        try {
            window["@boDbName("META_BO")"].JSON_DATA = JSON.parse(window["@boDbName("META_BO")"].JSON_DATA);
            if ("@isSubForm"=="True") {
                $(".subFormTitle").html(window["@boDbName("META_BO")"].JSON_DATA.TITLE);
            } else {
                $("#pageTitle").html(window["@boDbName("META_BO")"].JSON_DATA.TITLE);
            }
        } catch {}

        // build table props from meta_fields
        var @boDbName("columnShow") = [];
        var @boDbName("columnLabels") = { };
        window["@boDbName("META_BO")"].META_FIELD.forEach((e) => {
            if (e.GRID_SHOW == 1) window["@boDbName("columnShow")"].push(e.DB_NAME);
            window["@boDbName("columnLabels")"][e.DB_NAME] = e.GRID_NAME;
        });
        window["@boDbName("columnShow")"].push('BO_STATUS');
        window["@boDbName("columnLabels")"]['BO_STATUS'] = 'Statut';
        bus.setMeta("@Model.BO_DB_NAME", @boDbName("META_BO"));
    </script>

    <script type="text/javascript">
        var @boDbName("vapp") = new Vue(
        {
            el: '#@boDbName("-vue-app")',
            mixins: [MixinAuthorize],
            data: {
                boName: "@boDbName("")",
                hasSubForm: false,
                subForms: [],
                FormModes: {
                    insert:{
                        mode: "insert",
                        icon: "note_add",
                        tab: "Ajouter",
                        title: "@Html.Raw(Model.BO_NAME)",
                        subtitle: "Créer un nouvel object",
                        subFormMode: "disable",
                    },
                    update: {
                        mode: "update",
                        icon: "create",
                        tab: "Modifier",
                        title: "@Html.Raw(Model.BO_NAME)",
                        subtitle: "Modifier l'objet",
                        subFormMode: "",
                    }
                },
                CurrentMode: {},
                filterExists: false,
                filterBody: {},
                columnShow: @boDbName("columnShow"),
                columnLabels: @boDbName("columnLabels"),
                props: null,
            },
            computed: {
                getFiltre: function () {
                    var arrFields = [];
                    var META_FIELDS = bus.$data.@Model.BO_DB_NAME;

                    META_FIELDS.META_FIELD.forEach((e) => {
                        if (e.IS_FILTER === 1 && e.FORM_TYPE.match('subform-') === null) {
                            arrFields.push(e);
                            this.filterBody[e.DB_NAME] = {type : e.FORM_TYPE,value : null};
                            this.filterExists = true;
                        }
                    });

                    return arrFields;
                }
            },
            methods: {
                removeSuccess: function () {
                    NOTIF.success("Enregistrement supprimé avec succèss !");
                    this.$refs.theTable.removeLine(payload.index);
                },
                success: function (response) {
                    NOTIF.success('Objet enregistré avec succès.');
                    if (this.$refs.theForm.mode() === "insert" && this.hasSubForm) {
                        this.$refs.theForm.Get(response.BO_ID);
                    } else $("#@boDbName("tab-list")").trigger("click");

                    if (this.filterExists) $("#@boDbName("btnFilter")").trigger("click");
                    else this.$refs.theTable.load();
                },
                error: function (Response) {
                    console.log('Impossible d\'enregistré l\'objet !<br>', Response);
                    NOTIF.error('Impossible d\'enregistré l\'objet !<br>' +
                        (typeof Response.responseJSON === "undefined" ? Response.statusText : Response.responseJSON.ExceptionMessage));
                },
                getDefinitionDone: function () {
                    this.hasSubForm = this.$refs.theForm.subFroms.length > 0;
                    this.subForms = this.$refs.theForm.subFroms;
                    this.subForms.forEach((e) => {
                        e.BO_DB_NAME = e.FORM_TYPE.replaceAll("subform-", "");
                        e.url = "bo/subform/" + e.BO_DB_NAME.replaceAll("_BO_", "");
                    });
                },
                updateMode: function (entity) {
                    if (this.hasSubForm) {
                        this.subForms.forEach((e) => {
                            window[e.BO_DB_NAME + "vapp"].$refs.theTable.load("metabo/SelectChilds/" + e.BO_DB_NAME + "/" + entity.BO_ID);
                            window[e.BO_DB_NAME + "vapp"].$refs.theForm.$data.crudApi = URL.addPart(window[e.BO_DB_NAME + "vapp"].$refs.theForm.$props.api, entity.BO_ID);
                        });
                    }
                    this.FormModes.update.title = "@Html.Raw(Model.BO_NAME): " + entity.BO_ID;
                    this.CurrentMode = this.FormModes.update;
                },
                insertMode: function () {
                    this.CurrentMode = this.FormModes.insert;
                    if (this.hasSubForm) {
                        this.subForms.forEach((e) => {
                            window[e.BO_DB_NAME + "vapp"].$refs.theTable.clear();
                        });
                    }
                },
                filtrer: function () {
                    var me = this;
                    var filterModel = {
                        MetaBoID: @Model.META_BO_ID,
                        Items: []

                    };
                    for (var key in this.filterBody) {
                        var e = this.filterBody[key];
                        if (e.value === null || e.value.trim()=='') continue;
                        filterModel.Items.push(
                            {
                                "Logic": " and ",
                                "Field": key,
                                "Condition": e.type === "v-text" ? " like " : " = ",
                                "Value": e.type === "v-text" ? "%"+e.value+"%" : e.value
                            }
                        );
                    }

                    var data = EV.getComponent("data");
                    data.ExecuteSource({
                        url: "metabo/filter",
                        data: JSON.stringify(filterModel),
                        method: "POST",
                        loadComplete: function (obj, response) {
                            me.$refs.theTable.loadObject(response);
                        },
                        fail: function (response) {
                            console.log("fail : ",response);
                        }
                    });
                },
                formatActionHref: function (slotScope, href) {
                    return href.replaceAll("[BO_ID]", slotScope.line.BO_ID);
                }
            },
            mounted: function(){
                this.CurrentMode = this.FormModes.insert;
                log.redTitle("props" + "@ViewBag.compKey");
                this.props = window["props" + "@ViewBag.compKey"];
                log.redTitle("this.props",this.props);
            }
        });

        Vue.component('@boDbName("-action")', {
            template: $("#@boDbName("-action-template")").html(),
            props: {
                row: Object,
                index: Number,
            },
            methods: {
                edit: (id) => {
                    @boDbName("vapp").$refs.theForm.Get(id);
                    $("#@boDbName("tab-form")").trigger("click");
                },
                remove: (id, index) => {
                    NOTIF.confirm({
                        title: "Etes vous sûr ?",
                        valider: function () {
                            @boDbName("vapp").$refs.theForm.remove(id, index);
                        }
                    });
                    
                }
            }
        });
    </script>

    <script id="@boDbName("-detail-row-template")" type="text/template">
        <div>
            <div v-for="field in metafield" class="col-md-3">
                <b>{{field.GRID_NAME}} : {{field.TYPE}} </b><span v-format="{value:row[field.DB_NAME], format:field.GRID_FORMAT}">{{row[field.DB_NAME]}}</span>
            </div>
        </div>
    </script>
    <script>

        Vue.component('@boDbName("-detail-row")', {
            template: $("#@boDbName("-detail-row-template")").html(),
            props: {
                row: Object,
                metafield: Object,
            },
            methods: {
                edit: (id) => editFormMetaBo(id)
            }
        });
    </script>
}
